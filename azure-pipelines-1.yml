trigger: none

pr: none

pool:
  vmImage: ubuntu-latest

variables:
  System.Debug: true

jobs:
- job: CheckReleasepushtoFeeds
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - checkout: self
      persistCredentials: true
      clean: true

    - script: |
        # Set GitHub repository details
        repo_owner="Marimuthukumaran"
        repo_name="SampleJarREPO"
        github_token="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"
        
        # GitHub API URL to get releases
        api_url="https://api.github.com/repos/${repo_owner}/${repo_name}/releases"
        
        # Make the HTTP request to GitHub API using curl
        response=$(curl -s -H "Authorization: token ${github_token}" ${api_url})
        
        # Check if the request was successful
        if [[ $? -eq 0 ]]; then
            # Parse the JSON response to extract release information
            release_id=$(echo ${response} | jq -r '.[0].id')
            release_name=$(echo ${response} | jq -r '.[0].name')
            release_tag=$(echo ${response} | jq -r '.[0].tag_name')
            
            # Get the asset ID of the first asset in the release (change the index if needed)
            asset_id=$(echo ${response} | jq -r '.[0].assets[0].id')
            asset_name=$(echo ${response} | jq -r '.[0].assets[0].name')
            
            # Construct the asset download URL
            asset_url="https://api.github.com/repos/${repo_owner}/${repo_name}/releases/${release_id}/assets/${asset_id}"
            
            # Download the asset using curl
            curl -LJO -H "Authorization: token ${github_token}" ${asset_url}
            
            # Output download information
            echo "Downloaded ${asset_name} from release: ${release_name} (${release_tag})"
        else
            echo "Failed to retrieve release information. Check your GitHub token and repository details."
        fi
      displayName: 'Download Release Asset'

    - script: |
        echo Write your commands here
        echo Hello world
        cd $(System.ArtifactsDirectory)
        ls
      displayName: 'Additional Commands'
